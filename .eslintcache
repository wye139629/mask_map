[{"/Users/will/Documents/5xruby/self_prac/mask_map/src/index.js":"1","/Users/will/Documents/5xruby/self_prac/mask_map/src/App.js":"2","/Users/will/Documents/5xruby/self_prac/mask_map/src/reportWebVitals.js":"3"},{"size":500,"mtime":1609824246110,"results":"4","hashOfConfig":"5"},{"size":1637,"mtime":1609844229728,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1609824246111,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"2h0ewt",{"filePath":"11","messages":"12","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"/Users/will/Documents/5xruby/self_prac/mask_map/src/index.js",[],["15","16"],"/Users/will/Documents/5xruby/self_prac/mask_map/src/App.js",["17","18","19","20","21"],"/Users/will/Documents/5xruby/self_prac/mask_map/src/reportWebVitals.js",[],{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","severity":1,"message":"27","line":1,"column":8,"nodeType":"28","messageId":"29","endLine":1,"endColumn":12},{"ruleId":"26","severity":1,"message":"30","line":2,"column":9,"nodeType":"28","messageId":"29","endLine":2,"endColumn":17},{"ruleId":"26","severity":1,"message":"31","line":2,"column":30,"nodeType":"28","messageId":"29","endLine":2,"endColumn":38},{"ruleId":"32","severity":1,"message":"33","line":10,"column":13,"nodeType":"34","endLine":47,"endColumn":4},{"ruleId":"26","severity":1,"message":"35","line":32,"column":13,"nodeType":"28","messageId":"29","endLine":32,"endColumn":19},"no-native-reassign",["36"],"no-negated-in-lhs",["37"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Fragment' is defined but never used.","'useState' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'marker' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]