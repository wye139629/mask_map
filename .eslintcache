[{"/Users/will/Documents/5xruby/self_prac/mask_map/src/index.js":"1","/Users/will/Documents/5xruby/self_prac/mask_map/src/App.js":"2","/Users/will/Documents/5xruby/self_prac/mask_map/src/reportWebVitals.js":"3"},{"size":557,"mtime":1610875653051,"results":"4","hashOfConfig":"5"},{"size":10419,"mtime":1610877826905,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1610252026508,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"wisf99",{"filePath":"11","messages":"12","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"/Users/will/Documents/5xruby/self_prac/mask_map/src/index.js",[],["16","17"],"/Users/will/Documents/5xruby/self_prac/mask_map/src/App.js",["18"],"import { useEffect, useState } from 'react';\nimport './App.css';\nimport 'leaflet/dist/leaflet.css';\nimport './pharmacy_list.css';\nimport LeafLet from 'leaflet';\nimport 'leaflet.markercluster/dist/MarkerCluster.css';\nimport 'leaflet.markercluster/dist/leaflet.markercluster.js';\nimport getDistance from 'geolib/es/getDistance';\nimport Spinner from 'react-bootstrap/Spinner';\n\nfunction App() {\n    const [maskData, setMaskData] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [selectPharmacy, setSelectPharmacy] = useState([]);\n    const [cities, setCities] = useState(null);\n    const [allDistricts, setAllDistricts] = useState(null);\n    const [districts, setDistricts] = useState([]);\n    const [map, setMap] = useState(null);\n    const [today, setToday] = useState('');\n    const [day, setDay] = useState(0);\n    const [coordinates, setCoordinates] = useState({\n        latitude: 25.0375603,\n        longitude: 121.5618122,\n    });\n\n    useEffect(() => {\n        const fetchMaskData = async () => {\n            const response = await fetch(\n                'https://raw.githubusercontent.com/kiang/pharmacies/master/json/points.json'\n            );\n            const json = await response.json();\n            setMaskData(json.features);\n\n            let cities = {};\n            let districts = {};\n            json.features.forEach((data) => {\n                if (\n                    data.properties.county in cities !== true &&\n                    data.properties.county !== ''\n                ) {\n                    cities[data.properties.county] = [\n                        data.geometry.coordinates[1],\n                        data.geometry.coordinates[0],\n                    ];\n                }\n                for (let city in cities) {\n                    if (\n                        data.properties.county === city &&\n                        data.properties.town in districts !== true\n                    ) {\n                        districts[data.properties.town] = {\n                            city: city,\n                            location: [\n                                data.geometry.coordinates[1],\n                                data.geometry.coordinates[0],\n                            ],\n                        };\n                    }\n                }\n            });\n            setLoading(false);\n            setCities(cities);\n            setAllDistricts(districts);\n        };\n        function getDate() {\n            const dateObj = new Date();\n            const year = dateObj.getFullYear();\n            const month = dateObj.getMonth();\n            const date = dateObj.getDate();\n            const day = dateObj.getDay();\n            const todayDate = `${year}/${month + 1}/${date}`;\n            setToday(todayDate);\n            setDay(day);\n        }\n        getDate();\n        fetchMaskData();\n    }, []);\n\n    useEffect(() => {\n        if (!maskData) return;\n        const osmUrl = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';\n        const { latitude, longitude } = coordinates;\n        let center = [latitude, longitude];\n        let greenIcon = new LeafLet.Icon({\n            iconUrl:\n                'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png',\n            shadowUrl:\n                'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',\n            iconSize: [25, 41],\n            iconAnchor: [12, 41],\n            popupAnchor: [1, -34],\n            shadowSize: [41, 41],\n        });\n        let myMap = LeafLet.map('mapid', {\n            center: center, // center point coordinates\n            zoom: 18, // 0-18\n            attributionControl: true,\n            zoomControl: true, // Whether to show the-+ button\n        });\n        LeafLet.tileLayer(osmUrl, {\n            attribution:\n                'Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n        }).addTo(myMap);\n        LeafLet.marker(center, { icon: greenIcon })\n            .addTo(myMap)\n            .bindPopup('Your are here.')\n            .openPopup();\n        let markers = new LeafLet.markerClusterGroup().addTo(myMap);\n\n        let nearByPharmacy = [];\n        maskData.forEach((data) => {\n            markers.addLayer(\n                LeafLet.marker(\n                    [\n                        data.geometry.coordinates[1],\n                        data.geometry.coordinates[0],\n                    ],\n                    { icon: greenIcon }\n                ).bindPopup(\n                    '<h3>' +\n                        data.properties.name +\n                        '</h3>' +\n                        '<p>成人口罩數量:' +\n                        data.properties.mask_adult +\n                        '<br/>' +\n                        '\b兒童口罩數量:' +\n                        data.properties.mask_child +\n                        '</p>'\n                )\n            );\n\n            if (\n                getDistance(center, [\n                    data.geometry.coordinates[1],\n                    data.geometry.coordinates[0],\n                ]) /\n                    1000 <\n                1\n            ) {\n                nearByPharmacy.push(data);\n            }\n        });\n        setSelectPharmacy(nearByPharmacy);\n        myMap.addLayer(markers);\n        setMap(myMap);\n    }, [maskData, coordinates]);\n\n    function updateDistrictOption(options) {\n        setDistricts(options);\n    }\n\n    function updateSelectPharmacy(e) {\n        let selectElement = e.target.parentNode.children;\n        let selectValue = [];\n        let pharmacy = [];\n        Array.from(selectElement).forEach((value) => {\n            selectValue.push(value);\n        });\n        maskData.forEach((data) => {\n            if (\n                data.properties.county === selectValue[0].value &&\n                data.properties.town === selectValue[1].value\n            ) {\n                pharmacy.push(data);\n            }\n        });\n        setSelectPharmacy(pharmacy);\n    }\n\n    return (\n        <div className=\"map-container\">\n            <SearchPanel\n                dateData={{ today, day }}\n                areaData={{ cities, districts, allDistricts }}\n                selectPharmacy={selectPharmacy}\n                myMap={map}\n                updateDistrictOption={updateDistrictOption}\n                updateSelectPharmacy={updateSelectPharmacy}\n            />\n            <div id=\"mapid\">{loading && <Spinner animation=\"border\" />}</div>\n        </div>\n    );\n}\n\nfunction SearchPanel(props) {\n    return (\n        <div className=\"search-panel\">\n            <SearchArea\n                dateData={props.dateData}\n                areaData={props.areaData}\n                updateDistrictOption={props.updateDistrictOption}\n                updateSelectPharmacy={props.updateSelectPharmacy}\n            />\n            <PharmacyList\n                selectPharmacy={props.selectPharmacy}\n                myMap={props.myMap}\n            />\n        </div>\n    );\n}\n\nfunction SearchArea(props) {\n    const { today, day } = props.dateData;\n    const { cities, districts, allDistricts } = props.areaData;\n    const checkDay = {\n        0: '星期日',\n        1: '星期一',\n        2: '星期\b二',\n        3: '星期三',\n        4: '星期四',\n        5: '星期五',\n        6: '星期六',\n    };\n    const cityOption = [];\n    for (let city in cities) {\n        cityOption.push(<option value={city}>{city}</option>);\n    }\n\n    function cityChangeHandler(e) {\n        let districtOption = [];\n        document.querySelector('#district').disabled = false;\n        for (let district in allDistricts) {\n            if (allDistricts[district].city === e.target.value) {\n                districtOption.push(\n                    <option value={district}>{district}</option>\n                );\n            }\n        }\n\n        props.updateDistrictOption(districtOption);\n    }\n\n    function districtChangeHandler(e) {\n        props.updateSelectPharmacy(e);\n    }\n\n    return (\n        <div className=\"searchArea\">\n            <div className=\"dateTime\">\n                <div className=\"day\">{checkDay[day]}</div>\n                <div className=\"date\">{today}</div>\n            </div>\n            <form className=\"areaSelect\">\n                <select id=\"cities\" onChange={cityChangeHandler}>\n                    <option value=\"\">請選擇縣市</option>\n                    {cityOption}\n                </select>\n                <select id=\"district\" onChange={districtChangeHandler} disabled>\n                    <option value=\"\">請選擇行政區</option>\n                    {districts}\n                </select>\n            </form>\n        </div>\n    );\n}\n\nfunction PharmacyList(props) {\n    const selectPharmacy = props.selectPharmacy;\n    if (selectPharmacy === []) return;\n\n    return (\n        <div className=\"phamracyListArea\">\n            <ul className=\"phamracyList\">\n                {selectPharmacy.map((pharmacy, index) => {\n                    return (\n                        <Pharmacy\n                            key={index}\n                            pharmacy={pharmacy}\n                            myMap={props.myMap}\n                        />\n                    );\n                })}\n            </ul>\n        </div>\n    );\n}\n\nfunction Pharmacy(props) {\n    const pharmacy = props.pharmacy;\n    // console.log(props.myMap)\n\n    function clickHandler(e) {\n        props.myMap.flyTo(\n            [\n                pharmacy.geometry.coordinates[1],\n                pharmacy.geometry.coordinates[0],\n            ],\n            18,\n            1\n        );\n    }\n    return (\n        <li className=\"pharmacy\" onClick={clickHandler}>\n            <h3>{pharmacy.properties.name}</h3>\n            <ul>\n                <li>{pharmacy.properties.address}</li>\n                <li>{pharmacy.properties.phone}</li>\n            </ul>\n            <div className=\"maskAmount\">\n                <ul>\n                    <li className=\"adult\">\n                        成人口罩 {pharmacy.properties.mask_adult}\n                    </li>\n                    <li className=\"child\">\n                        兒童口罩 {pharmacy.properties.mask_child}\n                    </li>\n                </ul>\n            </div>\n        </li>\n    );\n}\n\nexport default App;\n","/Users/will/Documents/5xruby/self_prac/mask_map/src/reportWebVitals.js",[],{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":21,"column":25,"nodeType":"25","messageId":"26","endLine":21,"endColumn":39},"no-native-reassign",["27"],"no-negated-in-lhs",["28"],"no-unused-vars","'setCoordinates' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]