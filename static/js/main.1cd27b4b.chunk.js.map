{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["SearchPanel","props","className","SearchArea","dateData","areaData","updateDistrictOption","updateSelectPharmacy","PharmacyList","selectPharmacy","myMap","today","day","cities","districts","allDistricts","cityOption","city","push","value","0","1","2","3","4","5","6","id","onChange","e","districtOption","district","document","querySelector","disabled","target","map","pharmacy","index","Pharmacy","onClick","flyTo","geometry","coordinates","properties","name","address","phone","mask_adult","mask_child","App","useState","maskData","setMaskData","loading","setLoading","setSelectPharmacy","setCities","setAllDistricts","setDistricts","setMap","setToday","setDay","latitude","longitude","useEffect","fetchMaskData","a","fetch","response","json","features","forEach","data","county","town","location","dateObj","Date","year","getFullYear","month","getMonth","date","getDate","getDay","todayDate","center","greenIcon","LeafLet","Icon","iconUrl","shadowUrl","iconSize","iconAnchor","popupAnchor","shadowSize","zoom","attributionControl","zoomControl","tileLayer","attribution","addTo","marker","icon","bindPopup","openPopup","markers","markerClusterGroup","nearByPharmacy","addLayer","getDistance","options","selectElement","parentNode","children","selectValue","Array","from","Spinner","animation","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1cd27b4b.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport './App.css';\nimport 'leaflet/dist/leaflet.css';\nimport './pharmacy_list.css';\nimport LeafLet from 'leaflet';\nimport 'leaflet.markercluster/dist/MarkerCluster.css';\nimport 'leaflet.markercluster/dist/leaflet.markercluster.js';\nimport getDistance from 'geolib/es/getDistance';\nimport Spinner from 'react-bootstrap/Spinner';\n\nfunction App() {\n    const [maskData, setMaskData] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [selectPharmacy, setSelectPharmacy] = useState([]);\n    const [cities, setCities] = useState(null);\n    const [allDistricts, setAllDistricts] = useState(null);\n    const [districts, setDistricts] = useState([]);\n    const [map, setMap] = useState(null);\n    const [today, setToday] = useState('');\n    const [day, setDay] = useState(0);\n    const [coordinates, setCoordinates] = useState({\n        latitude: 25.0375603,\n        longitude: 121.5618122,\n    });\n\n    useEffect(() => {\n        const fetchMaskData = async () => {\n            const response = await fetch(\n                'https://raw.githubusercontent.com/kiang/pharmacies/master/json/points.json'\n            );\n            const json = await response.json();\n            setMaskData(json.features);\n\n            let cities = {};\n            let districts = {};\n            json.features.forEach((data) => {\n                if (\n                    data.properties.county in cities !== true &&\n                    data.properties.county !== ''\n                ) {\n                    cities[data.properties.county] = [\n                        data.geometry.coordinates[1],\n                        data.geometry.coordinates[0],\n                    ];\n                }\n                for (let city in cities) {\n                    if (\n                        data.properties.county === city &&\n                        data.properties.town in districts !== true\n                    ) {\n                        districts[data.properties.town] = {\n                            city: city,\n                            location: [\n                                data.geometry.coordinates[1],\n                                data.geometry.coordinates[0],\n                            ],\n                        };\n                    }\n                }\n            });\n            setLoading(false);\n            setCities(cities);\n            setAllDistricts(districts);\n        };\n        function getDate() {\n            const dateObj = new Date();\n            const year = dateObj.getFullYear();\n            const month = dateObj.getMonth();\n            const date = dateObj.getDate();\n            const day = dateObj.getDay();\n            const todayDate = `${year}/${month + 1}/${date}`;\n            setToday(todayDate);\n            setDay(day);\n        }\n        getDate();\n        fetchMaskData();\n    }, []);\n\n    useEffect(() => {\n        if (!maskData) return;\n        const osmUrl = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';\n        const { latitude, longitude } = coordinates;\n        let center = [latitude, longitude];\n        let greenIcon = new LeafLet.Icon({\n            iconUrl:\n                'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png',\n            shadowUrl:\n                'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',\n            iconSize: [25, 41],\n            iconAnchor: [12, 41],\n            popupAnchor: [1, -34],\n            shadowSize: [41, 41],\n        });\n        let myMap = LeafLet.map('mapid', {\n            center: center, // center point coordinates\n            zoom: 18, // 0-18\n            attributionControl: true,\n            zoomControl: true, // Whether to show the-+ button\n        });\n        LeafLet.tileLayer(osmUrl, {\n            attribution:\n                'Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n        }).addTo(myMap);\n        LeafLet.marker(center, { icon: greenIcon })\n            .addTo(myMap)\n            .bindPopup('Your are here.')\n            .openPopup();\n        let markers = new LeafLet.markerClusterGroup().addTo(myMap);\n\n        let nearByPharmacy = [];\n        maskData.forEach((data) => {\n            markers.addLayer(\n                LeafLet.marker(\n                    [\n                        data.geometry.coordinates[1],\n                        data.geometry.coordinates[0],\n                    ],\n                    { icon: greenIcon }\n                ).bindPopup(\n                    '<h3>' +\n                        data.properties.name +\n                        '</h3>' +\n                        '<p>成人口罩數量:' +\n                        data.properties.mask_adult +\n                        '<br/>' +\n                        '\b兒童口罩數量:' +\n                        data.properties.mask_child +\n                        '</p>'\n                )\n            );\n\n            if (\n                getDistance(center, [\n                    data.geometry.coordinates[1],\n                    data.geometry.coordinates[0],\n                ]) /\n                    1000 <\n                1\n            ) {\n                nearByPharmacy.push(data);\n            }\n        });\n        setSelectPharmacy(nearByPharmacy);\n        myMap.addLayer(markers);\n        setMap(myMap);\n    }, [maskData, coordinates]);\n\n    function updateDistrictOption(options) {\n        setDistricts(options);\n    }\n\n    function updateSelectPharmacy(e) {\n        let selectElement = e.target.parentNode.children;\n        let selectValue = [];\n        let pharmacy = [];\n        Array.from(selectElement).forEach((value) => {\n            selectValue.push(value);\n        });\n        maskData.forEach((data) => {\n            if (\n                data.properties.county === selectValue[0].value &&\n                data.properties.town === selectValue[1].value\n            ) {\n                pharmacy.push(data);\n            }\n        });\n        setSelectPharmacy(pharmacy);\n    }\n\n    return (\n        <div className=\"map-container\">\n            <SearchPanel\n                dateData={{ today, day }}\n                areaData={{ cities, districts, allDistricts }}\n                selectPharmacy={selectPharmacy}\n                myMap={map}\n                updateDistrictOption={updateDistrictOption}\n                updateSelectPharmacy={updateSelectPharmacy}\n            />\n            <div id=\"mapid\">{loading && <Spinner animation=\"border\" />}</div>\n        </div>\n    );\n}\n\nfunction SearchPanel(props) {\n    return (\n        <div className=\"search-panel\">\n            <SearchArea\n                dateData={props.dateData}\n                areaData={props.areaData}\n                updateDistrictOption={props.updateDistrictOption}\n                updateSelectPharmacy={props.updateSelectPharmacy}\n            />\n            <PharmacyList\n                selectPharmacy={props.selectPharmacy}\n                myMap={props.myMap}\n            />\n        </div>\n    );\n}\n\nfunction SearchArea(props) {\n    const { today, day } = props.dateData;\n    const { cities, districts, allDistricts } = props.areaData;\n    const checkDay = {\n        0: '星期日',\n        1: '星期一',\n        2: '星期\b二',\n        3: '星期三',\n        4: '星期四',\n        5: '星期五',\n        6: '星期六',\n    };\n    const cityOption = [];\n    for (let city in cities) {\n        cityOption.push(<option value={city}>{city}</option>);\n    }\n\n    function cityChangeHandler(e) {\n        let districtOption = [];\n        document.querySelector('#district').disabled = false;\n        for (let district in allDistricts) {\n            if (allDistricts[district].city === e.target.value) {\n                districtOption.push(\n                    <option value={district}>{district}</option>\n                );\n            }\n        }\n\n        props.updateDistrictOption(districtOption);\n    }\n\n    function districtChangeHandler(e) {\n        props.updateSelectPharmacy(e);\n    }\n\n    return (\n        <div className=\"searchArea\">\n            <div className=\"dateTime\">\n                <div className=\"day\">{checkDay[day]}</div>\n                <div className=\"date\">{today}</div>\n            </div>\n            <form className=\"areaSelect\">\n                <select id=\"cities\" onChange={cityChangeHandler}>\n                    <option value=\"\">請選擇縣市</option>\n                    {cityOption}\n                </select>\n                <select id=\"district\" onChange={districtChangeHandler} disabled>\n                    <option value=\"\">請選擇行政區</option>\n                    {districts}\n                </select>\n            </form>\n        </div>\n    );\n}\n\nfunction PharmacyList(props) {\n    const selectPharmacy = props.selectPharmacy;\n    if (selectPharmacy === []) return;\n\n    return (\n        <div className=\"phamracyListArea\">\n            <ul className=\"phamracyList\">\n                {selectPharmacy.map((pharmacy, index) => {\n                    return (\n                        <Pharmacy\n                            key={index}\n                            pharmacy={pharmacy}\n                            myMap={props.myMap}\n                        />\n                    );\n                })}\n            </ul>\n        </div>\n    );\n}\n\nfunction Pharmacy(props) {\n    const pharmacy = props.pharmacy;\n    // console.log(props.myMap)\n\n    function clickHandler(e) {\n        props.myMap.flyTo(\n            [\n                pharmacy.geometry.coordinates[1],\n                pharmacy.geometry.coordinates[0],\n            ],\n            18,\n            1\n        );\n    }\n    return (\n        <li className=\"pharmacy\" onClick={clickHandler}>\n            <h3>{pharmacy.properties.name}</h3>\n            <ul>\n                <li>{pharmacy.properties.address}</li>\n                <li>{pharmacy.properties.phone}</li>\n            </ul>\n            <div className=\"maskAmount\">\n                <ul>\n                    <li className=\"adult\">\n                        成人口罩 {pharmacy.properties.mask_adult}\n                    </li>\n                    <li className=\"child\">\n                        兒童口罩 {pharmacy.properties.mask_child}\n                    </li>\n                </ul>\n            </div>\n        </li>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}